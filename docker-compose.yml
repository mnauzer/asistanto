services:
  db:
    image: postgres:15
    container_name: asistanto-db
    environment:
      POSTGRES_DB: asistanto_db
      POSTGRES_USER: asistanto_user
      POSTGRES_PASSWORD: secret
      TZ: "Europe/Bratislava"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - asistanto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U asistanto_user -d asistanto_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  php-fpm:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-php-fpm
    container_name: asistanto-php-fpm
    volumes:
      - ./backend:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini:ro
      - ./docker/php/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini:ro
    environment:
      PHP_IDE_CONFIG: "serverName=Docker"
      TZ: "Europe/Bratislava"
    user: "1000:1000" # UID:GID používateľa laravel
    depends_on:
      db:
        condition: service_healthy
    networks:
      - asistanto-network
    healthcheck:
      test: ["CMD-SHELL", "php-fpm -t"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  nginx:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-nginx
    container_name: asistanto-nginx
    ports:
      - "8080:80"
    volumes:
      - ./backend:/var/www/html:ro
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      php-fpm:
        condition: service_healthy
    networks:
      - asistanto-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  frontend-customer:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-node-frontend
      args:
        FRONTEND_DIR: frontend-customer
        PORT: 3001
    container_name: asistanto-customer
    volumes:
      - ./frontend-customer:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - VITE_HOST=0.0.0.0
      - VITE_PORT=3001
      - VITE_API_URL=http://localhost:8080
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - asistanto-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  frontend-employee:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-node-frontend
      args:
        FRONTEND_DIR: frontend-employee
        PORT: 3002
    container_name: asistanto-employee
    volumes:
      - ./frontend-employee:/app
      - /app/node_modules
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - VITE_HOST=0.0.0.0
      - VITE_PORT=3002
      - VITE_API_URL=http://localhost:8080
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - asistanto-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  frontend-admin:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-node-frontend
      args:
        FRONTEND_DIR: frontend-admin
        PORT: 3003
    container_name: asistanto-admin
    volumes:
      - ./frontend-admin:/app
      - /app/node_modules
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - VITE_HOST=0.0.0.0
      - VITE_PORT=3003
      - VITE_API_URL=http://localhost:8080
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - asistanto-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

networks:
  asistanto-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local